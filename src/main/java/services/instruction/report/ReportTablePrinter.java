package services.instruction.report;

import models.InstructionType;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toMap;
import static utils.ConsoleUtils.printNewLine;
import static utils.ConsoleUtils.printPaddedRight;
import static utils.data.MapUtils.descSort;

/**
 * ReportTablePrinter is a part of report service package:
 * - responsible for presenting data generated by ReportService class to a consumer (sorting, setting default values, formatting ...)
 * - uses other utils to print the data to a console
 */

class ReportTablePrinter {

    private static DateTimeFormatter DateFormat = DateTimeFormatter.ofPattern("dd MMMM yyyy");

    private static List<String> AmountColumns = InstructionType.streamValues()
            .map(t -> "Amount (" + t.getName() + ")")
            .collect(toList());

    private static Map<InstructionType, List<String>> RankColumns = InstructionType.streamValues()
            .map(t -> new AbstractMap.SimpleImmutableEntry<>(t, Arrays.asList("Entity", "Rank (" + t.getName() + ")")))
            .collect(toMap(Entry::getKey, Entry::getValue));

    static {
        AmountColumns.add(0, "Settlement Date");
    }

    static void printAmounts(Map<LocalDate, Map<InstructionType, BigDecimal>> records) {
        printRow(AmountColumns);
        descSort(records, Map.Entry.comparingByKey()).forEach(ReportTablePrinter::printAmounts);
        printNewLine();
    }

    static void printRanks(InstructionType intstructionType, Map<String, Integer> records) {
        printRow(RankColumns.get(intstructionType));
        records.forEach(ReportTablePrinter::printRanks);
        printNewLine();
    }

    private static void printAmounts(LocalDate date, Map<InstructionType, BigDecimal> records) {
        printRow(createAmountsRow(date, records));
    }

    private static List<String> createAmountsRow(LocalDate date, Map<InstructionType, BigDecimal> records) {
        return Stream.concat(
                Stream.of(date.format(DateFormat)),
                extractAmounts(records)
        ).collect(toList());
    }

    private static Stream<String> extractAmounts(Map<InstructionType, BigDecimal> records) {
        return InstructionType.streamValues().map(t -> records.getOrDefault(t, BigDecimal.ZERO).toString());
    }

    private static void printRanks(String key, Integer rank) {
        printRow(key, rank.toString());
    }

    private static void printRow(String... values) {
        printRow(Arrays.asList(values));
    }

    private static void printRow(List<String> values) {
        printNewLine();
        values.forEach(v -> printPaddedRight(v, 20));
    }
}
